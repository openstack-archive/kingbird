[DEFAULT]
# Print more verbose output (set logging level to INFO instead of default WARNING level).
# verbose = True

# Print debugging output (set logging level to DEBUG instead of default WARNING level).
# debug = False

# Where to store Kingbird state files.  This directory must be writable by the
# user executing the agent.
# state_path = /var/lib/kingbird

# log_format = %(asctime)s %(levelname)8s [%(name)s] %(message)s
# log_date_format = %Y-%m-%d %H:%M:%S

# use_syslog                           -> syslog
# log_file and log_dir                 -> log_dir/log_file
# (not log_file) and log_dir           -> log_dir/{binary_name}.log
# use_stderr                           -> stderr
# (not user_stderr) and (not log_file) -> stdout
# publish_errors                       -> notification system

# use_syslog = False
# syslog_log_facility = LOG_USER

# use_stderr = True
# log_file =
# log_dir =

# publish_errors = False

# Address to bind the API server to
# bind_host = 127.0.0.1

# Port the bind the API server to
# bind_port = 8118

# Paste configuration file
# api_paste_config = api-paste.ini

# (StrOpt) Hostname to be used by the kingbird server, agents and services
# running on this machine. All the agents and services running on this machine
# must use the same host value.
# The default value is hostname of the machine.
#
# host =

# admin_tenant_name = %SERVICE_TENANT_NAME%
# admin_user = %SERVICE_USER%
# admin_password = %SERVICE_PASSWORD%

# Enable or disable bulk create/update/delete operations
# allow_bulk = True
# Enable or disable pagination
# allow_pagination = False
# Enable or disable sorting
# allow_sorting = False

# Default maximum number of items returned in a single response,
# value == infinite and value < 0 means no max limit, and value must
# be greater than 0. If the number of items requested is greater than
# pagination_max_limit, server will just return pagination_max_limit
# of number of items.
# pagination_max_limit = -1

# =========== WSGI parameters related to the API server ==============
# Number of separate worker processes to spawn.  The default, 0, runs the
# worker thread in the current process.  Greater than 0 launches that number of
# child processes as workers.  The parent process manages them.
# api_workers = 3

# Number of separate RPC worker processes to spawn.  The default, 0, runs the
# worker thread in the current process.  Greater than 0 launches that number of
# child processes as RPC workers.  The parent process manages them.
# This feature is experimental until issues are addressed and testing has been
# enabled for various plugins for compatibility.
# rpc_workers = 0

# Timeout for client connections socket operations. If an
# incoming connection is idle for this number of seconds it
# will be closed. A value of '0' means wait forever. (integer
# value)
# client_socket_timeout = 900

# wsgi keepalive option. Determines if connections are allowed to be held open
# by clients after a request is fulfilled. A value of False will ensure that
# the socket connection will be explicitly closed once a response has been
# sent to the client.
# wsgi_keep_alive = True

# Sets the value of TCP_KEEPIDLE in seconds to use for each server socket when
# starting API server. Not supported on OS X.
# tcp_keepidle = 600

# Number of seconds to keep retrying to listen
# retry_until_window = 30

# Number of backlog requests to configure the socket with.
# backlog = 4096

# Max header line to accommodate large tokens
# max_header_line = 16384

# Enable SSL on the API server
# use_ssl = False

# Certificate file to use when starting API server securely
# ssl_cert_file = /path/to/certfile

# Private key file to use when starting API server securely
# ssl_key_file = /path/to/keyfile

# CA certificate file to use when starting API server securely to
# verify connecting clients. This is an optional parameter only required if
# API clients need to authenticate to the API server using SSL certificates
# signed by a trusted CA
# ssl_ca_file = /path/to/cafile
# ======== end of WSGI parameters related to the API server ==========

# The strategy to be used for auth.
# Supported values are 'keystone'(default), 'noauth'.
auth_strategy = noauth

[keystone_authtoken]
# auth_uri = http://162.3.111.227:35357/v3
# identity_uri = http://162.3.111.227:35357
# admin_tenant_name = service
# admin_user = kingbird
# admin_password = 1234
# auth_version = 3

[database]
# This line MUST be changed to actually run the plugin.
# Example:
# connection = mysql://root:pass@127.0.0.1:3306/neutron
# Replace 127.0.0.1 above with the IP address of the database used by the
# main neutron server. (Leave it as is if the database runs on this host.)
connection = sqlite:///kingbird.db
# NOTE: In deployment the [database] section and its connection attribute may
# be set in the corresponding core plugin '.ini' file. However, it is suggested
# to put the [database] section and its connection attribute in this
# configuration file.

# Database engine for which script will be generated when using offline
# migration
# engine =

# The SQLAlchemy connection string used to connect to the slave database
# slave_connection =

# Database reconnection retry times - in event connectivity is lost
# set to -1 implies an infinite retry count
# max_retries = 10

# Database reconnection interval in seconds - if the initial connection to the
# database fails
# retry_interval = 10

# Minimum number of SQL connections to keep open in a pool
# min_pool_size = 1

# Maximum number of SQL connections to keep open in a pool
# max_pool_size = 10

# Timeout in seconds before idle sql connections are reaped
# idle_timeout = 3600

# If set, use this value for max_overflow with sqlalchemy
# max_overflow = 20

# Verbosity of SQL debugging information. 0=None, 100=Everything
# connection_debug = 0

# Add python stack traces to SQL as comment strings
# connection_trace = False

# If set, use this value for pool_timeout with sqlalchemy
# pool_timeout = 10

[oslo_concurrency]

# Directory to use for lock files. For security, the specified directory should
# only be writable by the user running the processes that need locking.
# Defaults to environment variable OSLO_LOCK_PATH. If external locks are used,
# a lock path must be set.
lock_path = $state_path/lock

# Enables or disables inter-process locks.
# disable_process_locking = False

[oslo_policy]

# The JSON file that defines policies.
# policy_file = policy.json

# Default rule. Enforced when a requested rule is not found.
# policy_default_rule = default

# Directories where policy configuration files are stored.
# They can be relative to any directory in the search path defined by the
# config_dir option, or absolute paths. The file defined by policy_file
# must exist for these directories to be searched. Missing or empty
# directories are ignored.
# policy_dirs = policy.d

[oslo_messaging_amqp]

#
# From oslo.messaging
#

# Address prefix used when sending to a specific server (string value)
# server_request_prefix = exclusive

# Address prefix used when broadcasting to all servers (string value)
# broadcast_prefix = broadcast

# Address prefix when sending to any server in group (string value)
# group_request_prefix = unicast

# Name for the AMQP container (string value)
# container_name =

# Timeout for inactive connections (in seconds) (integer value)
# idle_timeout = 0

# Debug: dump AMQP frames to stdout (boolean value)
# trace = false

# CA certificate PEM file for verifing server certificate (string value)
# ssl_ca_file =

# Identifying certificate PEM file to present to clients (string value)
# ssl_cert_file =

# Private key PEM file used to sign cert_file certificate (string value)
# ssl_key_file =

# Password for decrypting ssl_key_file (if encrypted) (string value)
# ssl_key_password =

# Accept clients using either SSL or plain TCP (boolean value)
# allow_insecure_clients = false


[oslo_messaging_qpid]

#
# From oslo.messaging
#

# Use durable queues in AMQP. (boolean value)
# amqp_durable_queues = false

# Auto-delete queues in AMQP. (boolean value)
# amqp_auto_delete = false

# Size of RPC connection pool. (integer value)
# rpc_conn_pool_size = 30

# Qpid broker hostname. (string value)
# qpid_hostname = localhost

# Qpid broker port. (integer value)
# qpid_port = 5672

# Qpid HA cluster host:port pairs. (list value)
# qpid_hosts = $qpid_hostname:$qpid_port

# Username for Qpid connection. (string value)
# qpid_username =

# Password for Qpid connection. (string value)
# qpid_password =

# Space separated list of SASL mechanisms to use for auth. (string value)
# qpid_sasl_mechanisms =

# Seconds between connection keepalive heartbeats. (integer value)
# qpid_heartbeat = 60

# Transport to use, either 'tcp' or 'ssl'. (string value)
# qpid_protocol = tcp

# Whether to disable the Nagle algorithm. (boolean value)
# qpid_tcp_nodelay = true

# The number of prefetched messages held by receiver. (integer value)
# qpid_receiver_capacity = 1

# The qpid topology version to use.  Version 1 is what was originally used by
# impl_qpid.  Version 2 includes some backwards-incompatible changes that allow
# broker federation to work.  Users should update to version 2 when they are
# able to take everything down, as it requires a clean break. (integer value)
# qpid_topology_version = 1


[oslo_messaging_rabbit]

#
# From oslo.messaging
#

# Use durable queues in AMQP. (boolean value)
# amqp_durable_queues = false

# Auto-delete queues in AMQP. (boolean value)
# amqp_auto_delete = false

# Size of RPC connection pool. (integer value)
# rpc_conn_pool_size = 30

# SSL version to use (valid only if SSL enabled). Valid values are TLSv1 and
# SSLv23. SSLv2, SSLv3, TLSv1_1, and TLSv1_2 may be available on some
# distributions. (string value)
# kombu_ssl_version =

# SSL key file (valid only if SSL enabled). (string value)
# kombu_ssl_keyfile =

# SSL cert file (valid only if SSL enabled). (string value)
# kombu_ssl_certfile =

# SSL certification authority file (valid only if SSL enabled). (string value)
# kombu_ssl_ca_certs =

# How long to wait before reconnecting in response to an AMQP consumer cancel
# notification. (floating point value)
# kombu_reconnect_delay = 1.0

# The RabbitMQ broker address where a single node is used. (string value)
# rabbit_host = localhost

# The RabbitMQ broker port where a single node is used. (integer value)
# rabbit_port = 5672

# RabbitMQ HA cluster host:port pairs. (list value)
# rabbit_hosts = $rabbit_host:$rabbit_port

# Connect over SSL for RabbitMQ. (boolean value)
# rabbit_use_ssl = false

# The RabbitMQ userid. (string value)
# rabbit_userid = guest

# The RabbitMQ password. (string value)
# rabbit_password = guest

# The RabbitMQ login method. (string value)
# rabbit_login_method = AMQPLAIN

# The RabbitMQ virtual host. (string value)
# rabbit_virtual_host = /

# How frequently to retry connecting with RabbitMQ. (integer value)
# rabbit_retry_interval = 1

# How long to backoff for between retries when connecting to RabbitMQ. (integer
# value)
# rabbit_retry_backoff = 2

# Maximum number of RabbitMQ connection retries. Default is 0 (infinite retry
# count). (integer value)
# rabbit_max_retries = 0

# Use HA queues in RabbitMQ (x-ha-policy: all). If you change this option, you
# must wipe the RabbitMQ database. (boolean value)
# rabbit_ha_queues = false

# Deprecated, use rpc_backend=kombu+memory or rpc_backend=fake (boolean value)
# fake_rabbit = false
